def recommend_products(user_items, rules, top_n=5):
    """
    Generate product recommendations based on association rules and user input.

    Args:
        user_items (list): List of items the user has already purchased.
        rules (DataFrame): Association rules generated by the Apriori algorithm.
        top_n (int): Maximum number of recommendations to return.

    Returns:
        list: Top recommended products based on the confidence of the rules.
    """
    recommendations = []

    # Convert user_items to a set for easier comparison
    user_items_set = set(user_items)

    for _, rule in rules.iterrows():
        # Ensure antecedents and consequents are evaluated as sets
        antecedents = eval(rule['antecedents'])
        consequents = eval(rule['consequents'])
        confidence = rule['confidence']

        # Check if user items match any of the antecedents
        if user_items_set.intersection(antecedents):
            for item in consequents:
                if item not in user_items_set and item not in [rec[0] for rec in recommendations]:
                    recommendations.append((item, confidence))

    # Sort recommendations by confidence and return the top_n items
    recommendations = sorted(recommendations, key=lambda x: x[1], reverse=True)
    return [rec[0] for rec in recommendations[:top_n]]